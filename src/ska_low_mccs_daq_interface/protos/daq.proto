syntax = "proto3";
package daq;

/*
A class holding the DAQ service implementation.
*/
service Daq{
    rpc StartDaq(startDaqRequest) returns (stream startDaqResponse) {
        /*
        Start the DaqConsumers.

        The MccsDaqReceiver will begin watching the interface specified in the
        configuration and will start the configured consumers.

        ;param argin; String representing the DaqModes and their
            corresponding callbacks to start or an empty string.

        ;return; A streamed response containing a the call_state or call_info
            message indicating events posted by server. The message is for
            information purpose only.*/
    }
    rpc StopDaq(stopDaqRequest) returns (commandResponse) {
        /*
        Stop the DaqReceiver.

        The DAQ receiver will cease watching the specified interface
        and will stop all running consumers.

        ;return; A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.*/
    }
    rpc InitDaq(configDaqRequest) returns (commandResponse) {
        /*
        Initialise a new DaqReceiver instance.

        ;param request; arguments object containing `config`
            `config`; The initial daq configuration to apply.
        ;param context; command metadata

        ;return; a commandResponse object containing `result_code` and `message`*/
    }
    rpc ConfigureDaq(configDaqRequest) returns (commandResponse) {
        /*
        Configure the DaqReceiver.

        Applies the specified configuration to the DaqReceiver.

        ;param argin; The daq configuration to apply.
        ;return; A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.*/
    }
    rpc GetConfiguration(getConfigRequest) returns (ConfigurationResponse) {
        /*
        Get the Configuration from DAQ.

        ;return; A JSON-encoded dictionary of the configuration.

        ;example;

        >>> dp.tango.DeviceProxy("low-mccs/daqreceiver/001")
        >>> jstr = dp.command_inout("GetConfiguration")
        >>> dict = json.loads(jstr)*/
    }
    rpc DaqStatus(daqStatusRequest) returns (daqStatusResponse) {
        /*
        Provide status information for this MccsDaqReceiver.

        This method returns status as a json string with entries for;
            - Daq Health; [HealthState.name; str, HealthState.value; int]
            - Running Consumers; [DaqMode.name; str, DaqMode.value; int]
            - Receiver Interface; "Interface Name"; str
            - Receiver Ports; [Port_List]; list[int]
            - Receiver IP; "IP_Address"; str

        ;return; A json string containing the status of this DaqReceiver.*/
    }
    rpc BandpassMonitorStart(bandpassMonitorStartRequest) returns (stream commandResponse){
        /*
        Begin monitoring antenna bandpasses.

        ;return; A tuple containing a return code and a string
            message indicating status. The message is for
            information purposes only.
        */
    }
    rpc BandpassMonitorStop(bandpassMonitorStopRequest) returns (commandResponse){
        /*
        Stop monitoring antenna bandpasses.

        ;return; A tuple containing a return code and a string
            message indicating status. The message is for
            information purposes only.
        */
    }
}

message bandpassMonitorStartRequest {
    string config=1;
    /*
    CURRENT MEMBERS
    string config.station_config_path
    string config.plot_directory
    bool config.monitor_rms
    bool config.auto_handle_daq
    */
}

message bandpassMonitorStopRequest {
// Empty
}


message CallState {
  enum State {
    STOPPED = 0;
    RECEIVING = 1;
    LISTENING = 2;
  }
  State state = 2;
}

enum ResultCode{
    OK = 0;
    STARTED = 1;
    QUEUED = 2;
    FAILED = 3;
    UNKNOWN = 4;
    REJECTED = 5;
    NOT_ALLOWED = 6;
    ABORTED = 7;
}

message CallInfo {
    string data_types_received=1;
    string files_written=2;
    string extra_info=3;
}

message startDaqRequest{
    string modes_to_start = 1;
}

message startDaqResponse {
    oneof start_daq_response {
        CallState call_state = 1;
        CallInfo call_info = 2;
    }
}

// Empty messages as no params expected but this is in case it changes.
message stopDaqRequest{
    
}

message getConfigRequest{
    
}

message getConfigResponse{
    string config = 1;
}

message daqStatusRequest{

}

message daqStatusResponse{
    string status = 1;
}

message commandResponse{
    ResultCode result_code = 1;
    string message = 2;
}

message configDaqRequest{
    string config = 1;
}
message ConfigurationResponse {
    /*
    int32
    */
    int32 nof_antennas = 1;
    int32 nof_channels = 2;
    int32 nof_beams = 3;
    int32 nof_polarisations = 4;
    int32 nof_tiles = 5;
    int32 nof_raw_samples = 6;
    int32 raw_rms_threshold = 7;
    int32 nof_channel_samples = 8;
    int32 nof_correlator_samples = 9;
    int32 nof_correlator_channels = 10;
    int32 continuous_period = 11;
    int32 nof_beam_samples = 12;
    int32 nof_beam_channels = 13;
    int32 nof_station_samples = 14;
    int32 receiver_frames_per_block = 15;
    int32 receiver_nof_blocks = 16;
    int32 receiver_nof_threads = 17;
    int32 receiver_frame_size = 18;
    int32 acquisition_duration = 19;
    int32 acquisition_start_time = 20;
    /*
    bool
    */
    bool append_integrated = 21;
    bool logging = 22;
    bool write_to_disk = 23;
    /*
    double
    */
    double sampling_time = 24;
    double sampling_rate = 25;
    double oversampling_factor = 26;
    /*
    string
    */
    string receiver_ports = 27;
    string observation_metadata = 28;
    string receiver_interface = 29;
    string receiver_ip = 30;
    string directory = 31;
    string description = 32;
    /*
    None
    */
    empty station_config = 33;
    empty max_filesize = 34;
    
}

message empty {}

/*
message noParamRequest{

}
*/