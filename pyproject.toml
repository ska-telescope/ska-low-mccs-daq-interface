[tool.poetry]
name = "ska_low_mccs_daq_interface"
version = "0.0.1"
description = "SKA Low MCCS DAQ Interface repository specifies the client-server interface between the DAQ and its monitoring and control component."
authors = ["Drew Devereux <drew.devereux@skao.int>"]
license="BSD-3-Clause"
readme = "README.md"

[[tool.poetry.source]]
name = 'skao'
url = 'https://artefact.skao.int/repository/pypi-internal/simple'

[tool.poetry.dependencies]
python = "^3.10"
ska-control-model = "^0.3.1"
grpcio = "^1.54.2"
grpcio-tools = "^1.54.2"

[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
flake8 = "^6.0.0"
isort = "^5.12.0"
pylint = "^2.17.3"
pylint-junit = "^0.3.2"
pytest = "^7.3.1"
pytest-cov = "^4.1.0"
flake8-docstrings = "^1.7.0"
flake8-rst-docstrings = "^0.3.0"
flake8-pyproject = "^1.2.3"
mypy = "^1.3.0"
grpc-stubs = "^1.53.0.2"
types-protobuf = "^4.23.0.1"
protobuf = "^4.23.2"
mypy-protobuf = "^3.4.0"

[tool.poetry.group.docs.dependencies]
Sphinx = "^6.2.1"
sphinx-rtd-theme = "^1.2.1"
sphinx-autodoc-typehints = "^1.23.0"
ska-control-model = "^0.3.1"
grpcio = "^1.54.2"
grpcio-tools = "^1.54.2"

[tool.pytest.ini_options]
addopts = "-v"

[tool.flake8]
docstring-style = "sphinx"
rst-directives = "literalinclude"
rst-roles = ["py:attr", "py:class", "py:const", "py:exc", "py:func", "py:meth", "py:mod"]
enable = "DAR104"
exclude = ["src/ska_low_mccs_daq_interface/generated_code"]

max-complexity = 10

# E203 and W503 conflict with black
ignore = ["E203", "W503"]

[tool.mypy]
mypy_path = "src/:tests/"
show_error_codes = true
strict = true
exclude = ['src/ska_low_mccs_daq_interface/generated_code/daq_pb2_gprc.py']

[[tool.mypy.overrides]]
module = [
    "ska_low_mccs_daq_interface.generated_code.*",
]
ignore_errors = true

[tool.pylint.messages_control]
disable = [
    "duplicate-code",
    "fixme",
]
enable = ["useless-suppression"]

[tool.pylint.similarities]
min-similarity-lines = 7
ignore-imports = "yes"

# Ignore gRPC generated code.
generated-members = ["daq_pb2.*", "daq_pb2_gprc.*"]
ignore-paths="src/ska_low_mccs_daq_interface/generated_code"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
